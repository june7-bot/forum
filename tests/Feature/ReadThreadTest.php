<?php

namespace Tests\Feature;

use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

class ReadThreadTest extends TestCase
{
    use RefreshDatabase;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->thread = create('App\Thread');
    }

    public function test_user_can_browse_threads()
    {

        $this->get('/threads')->assertSee($this->thread->title);

    }

    function test_user_can_see_single_thread()
    {

        $this->get($this->thread->path())->assertSee($this->thread->title);

    }


    // 글 마다 각자의 채널이 존재
    function test_user_can_filter_threads_according_to_a_tag()
    {

        $this->withoutExceptionHandling();

        $channel = factory('App\Channel')->create();

        $threadInChannel = create('App\Thread', ['channel_id' => $channel->id]);

        $threadNotInChannel = create('App\Thread');

        $this->get('/threads/' . $channel->slug)
            ->assertSee($threadInChannel->title)
            ->assertDontSee($threadNotInChannel->title);
    }

    function test_user_can_filter_thread_by_username()
    {
        $this->withoutExceptionHandling();

        $this->signIn(create('App\User', ['name' => 'JohnDoe']));

        $threadByJohn = create('App\Thread', ['user_id' => auth()->id()]);

        $threadNotByJohn = create('App\Thread');

        $this->get('threads?by=JohnDoe')
            ->assertSee($threadByJohn->title)
            ->assertDontSee($threadNotByJohn->title);
    }

    function test_user_can_filter_threads_by_popularity()
    {
        $threadWithTwoReplies = create('App\Thread');
        create('App\Reply', ['thread_id' => $threadWithTwoReplies], 2);

        $threadWithThreeReplies = create('App\Thread');
        create('App\Reply', ['thread_id' => $threadWithThreeReplies], 3);

        $threadWithNoReplies = $this->thread;

        $response = $this->getJson('threads?popular=1')->json();

        $this->assertEquals([3, 2, 0], array_column($response, 'replies_count'));
    }

    function test_user_can_filter_thread_that_are_notanswered()
    {
        $thread = create('App\Thread');
        create('App\Reply', ['thread_id' => $thread->id]);

        $res = $this->getJson('threads?unanswered=1')->json();

        $this->assertCount(1, $res);
    }

    function test_user_can_request_all_replies_for_a_given_thread()
    {

        $thread = create('App\Thread');
        create('App\Reply', ['thread_id' => $thread->id]);

        $res = $this->getJson($thread->path() . '/replies')->json();
        $this->assertCount(1 , $res['data']);

    }

}
