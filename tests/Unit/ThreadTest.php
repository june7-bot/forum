<?php

namespace Tests\Unit;

use App\Notifications\ThreadWasUpdated;
use App\Reply;
use App\Thread;
use Illuminate\Database\Eloquent\Collection;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Illuminate\Support\Facades\Notification;
use Tests\TestCase;

class ThreadTest extends TestCase
{
    use DatabaseMigrations;

    protected $thread;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->thread = factory('App\Thread')->create();
    }

    function test_thread_can_make_a_string_path()
    {
        $thread = create('App\Thread');

        $this->assertEquals('/threads/' . $thread->channel->slug . '/' . $thread->id , $thread->path() );
    }

    function test_thread_has_a_creator()
    {

        $this->assertInstanceOf('App\User' ,  $this->thread->creator);
    }

    public function test_thread_has_replies()
    {

       $this->assertInstanceOf(Collection::class , $this->thread->replies );
    }


    function test_thread_can_add_reply()
    {
        $this->thread->addReply([
            'body' => 'Foobar',
            'user_id' => 1
        ]);

        $this->assertCount(1, $this->thread->replies );
    }

    function test_thread_notifies_all_regsitered_subscribers_when_a_rply_isadd()
    {

        Notification::fake();

        $this->signIn();

        $this->thread->subscribe();

        $this->thread->addReply([
            'body' => 'foobar',
            'user_id' => 1
        ]);

        Notification::assertSentTo( auth()->user() , ThreadWasUpdated::class);


    }


    function test_thread_belongs_to_channel()
    {
        $thread = create('App\Thread');

        $this->assertInstanceOf('App\Channel' , $thread->channel );
    }

    function test_thread_can_be_subscribed()
    {
        $thread =  create('App\Thread');

        $this->signIn();

        $thread->subscribe($userId = 1);

        self::assertEquals(1, $thread->subscriptions()->where('user_id', $userId)->count());

    }

    function test_thread_can_be_unsubscribed_from()
    {
        $thread =  create('App\Thread');

        $thread->subscribe($userId = 1);

        $thread->unsubscribe($userId);


        self::assertEquals(0, $thread->subscriptions->count());

    }

    function test_it_knows_if_authenticated_user_is_subscribed_to_it()
    {
        $thread = create('App\Thread');

        $this->signIn();

        $this->assertFalse($thread->isSubscribedTo);

        $thread->subscribe();

        $this->assertTrue($thread->isSubscribedTo);
    }

    function test_thread_can_check_if_the_authenticated_user_has_read()
    {
        $this->signIn();
        $thread = create('App\Thread');

        tap(auth()->user(), function ($user) use ($thread) {
            $this->assertTrue($thread->hasUpdatesFor($user));

            $user->read($thread);

            $this->assertFalse($thread->hasUpdatesFor($user));
        });
    }
}
